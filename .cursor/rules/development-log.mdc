---
description:
globs:
alwaysApply: false
---
# Development Log Management Rules

## 개발 로그 추적 시스템

프로젝트의 모든 개발 진행 상황을 체계적으로 추적하고 기록합니다.

## 개발 로그 파일 위치

개발 로그는 반드시 프로젝트 루트에 `development-log.md` 파일로 생성되며, .gitignore에 추가되어 GitHub에 업로드되지 않습니다.

## 로그 작성 규칙

### 일일 로그 형식
```markdown
## [YYYY-MM-DD] - [시간] - [개발자명]

### 개발 내용
- 구체적인 개발 작업 내용
- 구현된 기능 설명
- 해결된 문제점

### 변경된 파일
- `경로/파일명`: 변경 내용 요약
- `경로/파일명`: 변경 내용 요약

### 다음 단계
- 예정된 작업 항목
- 해결해야 할 이슈

### 메모
- 특별한 주의사항
- 참고 자료
- 트러블슈팅 정보

---
```

### 로그 작성 타이밍
1. **세션 시작 시**: 오늘의 계획 기록
2. **주요 기능 완성 시**: 즉시 기록
3. **세션 종료 시**: 요약 및 다음 계획 기록

### 필수 기록 항목
- **날짜 및 시간**: 정확한 개발 시점
- **구현 내용**: 무엇을 만들었는지 상세히
- **파일 변경사항**: 어떤 파일들이 수정되었는지
- **테스트 결과**: 작동 여부 확인
- **이슈 및 해결방법**: 발생한 문제와 해결책

## 로그 카테고리 분류

### 🏗️ Architecture (아키텍처)
- 시스템 설계 변경
- 폴더 구조 수정
- 의존성 추가/제거

### 🚀 Feature (기능 개발)
- 새로운 기능 구현
- 기존 기능 개선
- API 엔드포인트 추가

### 🐛 Bug Fix (버그 수정)
- 버그 발견 및 수정
- 에러 핸들링 개선

### 🎨 UI/UX (사용자 인터페이스)
- 디자인 구현
- 사용자 경험 개선
- 반응형 디자인

### 🧪 Testing (테스트)
- 테스트 코드 작성
- 테스트 실행 결과
- 성능 테스트

### 📚 Documentation (문서화)
- 코드 주석 추가
- README 업데이트
- API 문서 작성

### 🔧 Configuration (설정)
- 환경 설정 변경
- 배포 설정
- 도구 설정

## .gitignore 자동 업데이트

개발 로그 파일이 생성될 때마다 자동으로 .gitignore에 추가되어야 합니다:

```gitignore
# Development logs - do not commit
development-log.md
dev-log.md
*.dev.log
```

## 로그 백업 규칙

### 주간 백업
- 매주 일요일에 로그 백업
- `logs/` 폴더에 주차별 저장
- 형식: `logs/week-YYYY-WW.md`

### 월간 요약
- 매월 말일에 월간 요약 생성
- 주요 성과 및 이슈 정리
- 다음 달 계획 수립

## 팀 협업 시 로그 관리

### 개인 로그
- 각자의 개발 작업 기록
- 파일명: `development-log-[이름].md`

### 프로젝트 로그
- 전체 프로젝트 진행 상황
- 주요 마일스톤 기록
- 파일명: `project-log.md`

## 로그 분석 및 활용

### 생산성 분석
- 일일/주간/월간 개발량 측정
- 시간 대비 성과 분석
- 효율성 개선 방안 도출

### 이슈 패턴 분석
- 반복되는 문제점 파악
- 해결 패턴 정리
- 예방 방안 수립

## 로그 템플릿 예시

```markdown
# AI University System - Development Log

## [2024-01-15] - [14:30] - [Developer]

### 🚀 Feature: 학생 관리 시스템 구현

#### 개발 내용
- 학생 등록 API 엔드포인트 구현
- 학생 프로필 관리 UI 컴포넌트 개발
- 데이터베이스 스키마 설계 및 마이그레이션

#### 변경된 파일
- `backend/src/controllers/student-controller.ts`: 학생 CRUD API 구현
- `backend/src/models/student.model.ts`: 학생 데이터 모델 정의
- `frontend/src/components/StudentProfile.tsx`: 학생 프로필 컴포넌트
- `database/migrations/001_create_students_table.sql`: 학생 테이블 생성

#### 테스트 결과
- ✅ 학생 등록 API 정상 작동
- ✅ 프로필 UI 렌더링 확인
- ⚠️ 이메일 중복 체크 로직 개선 필요

#### 다음 단계
- 이메일 중복 체크 유효성 검사 추가
- 학생 대시보드 페이지 구현
- 프로필 이미지 업로드 기능 개발

#### 🐛 발생한 이슈
- TypeScript 타입 에러: Student 인터페이스 누락
- 해결방법: types/student.ts 파일에 인터페이스 정의 추가

#### 메모
- 학생 데이터 스키마 변경 시 마이그레이션 스크립트 필요
- 성능 최적화를 위해 인덱스 추가 고려
- GDPR 준수를 위한 개인정보 암호화 검토 필요

---
```

## 자동화 도구 활용

### Git Hooks 활용
- Pre-commit: 로그 업데이트 확인
- Post-commit: 자동 로그 템플릿 생성

### IDE 확장 프로그램
- 시간 추적 플러그인 활용
- 자동 로그 생성 스니펫

## 주의사항

1. **개인정보 보호**: 로그에 민감한 정보 기록 금지
2. **일관성 유지**: 정해진 형식 준수
3. **정기적 업데이트**: 실시간 또는 일일 단위 기록
4. **백업 필수**: 로컬 백업 및 클라우드 동기화
5. **보안**: 로그 파일 접근 권한 관리

## 성과 측정 지표

### 개발 효율성
- 기능당 개발 시간
- 버그 발생률
- 코드 리팩토링 빈도

### 학습 진도
- 새로운 기술 도입
- 문제 해결 능력 향상
- 코드 품질 개선

이 규칙을 통해 프로젝트의 모든 개발 과정을 체계적으로 추적하고, 지속적인 개선을 위한 데이터를 수집합니다.
