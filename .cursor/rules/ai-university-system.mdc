---
description: 
globs: 
alwaysApply: true
---
# AI University Education System - Cursor Rules

## 프로젝트 개요

이 프로젝트는 AI를 배울 수 있는 완전한 대학/대학원 교육 시스템을 구축합니다. 실제 대학과 유사한 구조로 학생을 관리하고, AI 기반 개인화 교육을 제공합니다.

## 핵심 목표

- 완전한 AI 커리큘럼 및 교과과정 자동 생성
- 학생 개별 맞춤형 교육 진행
- 실시간 학습 진도 및 성취도 추적
- 다양한 멀티미디어 교육 콘텐츠 제공
- 자동화된 과제 및 시험 시스템

## 시스템 아키텍처

### 백엔드 구조
```
backend/
├── src/
│   ├── controllers/     # API 컨트롤러
│   ├── models/         # 데이터 모델
│   ├── services/       # 비즈니스 로직
│   ├── middleware/     # 미들웨어
│   ├── routes/         # 라우터 설정
│   ├── ai/            # AI 모듈
│   └── utils/         # 유틸리티
├── config/            # 설정 파일
└── tests/            # 테스트 파일
```

### 프론트엔드 구조
```
frontend/
├── src/
│   ├── components/     # 재사용 컴포넌트
│   ├── pages/         # 페이지 컴포넌트
│   ├── hooks/         # 커스텀 훅
│   ├── services/      # API 서비스
│   ├── store/         # 상태 관리
│   ├── styles/        # 스타일 파일
│   └── utils/         # 유틸리티
├── public/           # 정적 파일
└── tests/           # 테스트 파일
```

## 핵심 모듈

### 1. 학생 관리 시스템 (Student Management)
- 학생 등록 및 프로필 관리
- 학습 이력 추적
- 성취도 평가 시스템
- 개인화 학습 경로 설정

### 2. 커리큘럼 생성 엔진 (Curriculum Engine)
- AI 기반 교과과정 자동 생성
- 난이도 조절 시스템
- 학습 목표 설정 및 관리
- 선수과목 체크 시스템

### 3. 콘텐츠 관리 시스템 (Content Management)
- 텍스트 기반 강의 자료
- 동적 그래프 및 시각화
- 이미지 생성 및 관리
- 유튜브 콘텐츠 큐레이션

### 4. 평가 시스템 (Assessment System)
- 자동 과제 생성
- 실시간 시험 시스템
- 자동 채점 기능
- 피드백 생성

### 5. AI 튜터 시스템 (AI Tutor)
- 개인화 학습 지원
- 질의응답 시스템
- 학습 패턴 분석
- 추천 시스템

## 데이터베이스 설계

### 주요 엔티티
- **Students**: 학생 정보
- **Courses**: 강의 정보
- **Curricula**: 커리큘럼 구조
- **Lessons**: 개별 수업
- **Assessments**: 평가 및 과제
- **Progress**: 학습 진도
- **Content**: 교육 콘텐츠
- **Analytics**: 학습 분석 데이터

### 관계 설계
- 1:N 관계: Student-Enrollments, Course-Lessons
- N:N 관계: Student-Course, Lesson-Content
- 계층 구조: Curriculum-Course-Lesson

## AI 통합 가이드라인

### AI 서비스 통합
- OpenAI GPT-4 for 콘텐츠 생성
- Claude for 복잡한 설명 및 튜터링
- DALL-E for 이미지 생성
- 커스텀 ML 모델 for 학습 분석

### AI 기능 구현 원칙
1. **모듈화**: 각 AI 기능을 독립적인 서비스로 구현
2. **확장성**: 새로운 AI 모델 쉽게 추가 가능
3. **에러 핸들링**: AI 서비스 실패 시 fallback 제공
4. **성능 최적화**: 캐싱 및 배치 처리 활용

## 코딩 스타일 및 규칙

### 백엔드 (Node.js/Express)
- TypeScript 사용 필수
- 함수형 프로그래밍 패러다임 선호
- 명확한 타입 정의
- 모든 API에 대한 swagger 문서화

### 프론트엔드 (React/Next.js)
- TypeScript + React 18 사용
- 컴포넌트 기반 설계
- 상태 관리: Zustand 또는 Redux Toolkit
- 스타일링: Tailwind CSS + shadcn/ui

### 공통 규칙
- **네이밍**: camelCase (변수/함수), PascalCase (컴포넌트/클래스)
- **파일명**: kebab-case
- **함수**: 단일 책임 원칙 준수
- **주석**: JSDoc 형식 사용
- **테스트**: 모든 핵심 기능에 대한 유닛 테스트 작성

## 보안 및 개인정보 보호

### 보안 요구사항
- JWT 기반 인증 시스템
- 비밀번호 해싱 (bcrypt)
- Rate limiting 적용
- HTTPS 강제 사용
- CORS 정책 설정

### 개인정보 보호
- GDPR 준수
- 학습 데이터 암호화
- 개인정보 익명화
- 데이터 백업 및 복구 시스템

## 성능 최적화

### 프론트엔드
- Code splitting 적용
- 이미지 최적화 (Next.js Image)
- 무한 스크롤 및 가상화
- PWA 지원

### 백엔드
- 데이터베이스 인덱싱
- 쿼리 최적화
- Redis 캐싱
- CDN 활용

## 테스트 전략

### 테스트 유형
- **유닛 테스트**: Jest + Testing Library
- **통합 테스트**: Supertest (API)
- **E2E 테스트**: Playwright
- **성능 테스트**: K6

### 커버리지 목표
- 유닛 테스트: 80% 이상
- 통합 테스트: 핵심 API 100%
- E2E 테스트: 주요 사용자 플로우 100%

## 개발 진행 사항 추적

### 개발 로그 관리
- [development-log.md](mdc:development-log.md): 일일 개발 진행 사항 기록
- Git commit 메시지 규칙: [type(scope): description]
- Pull Request 템플릿 사용
- 코드 리뷰 필수

### 배포 전략
- 개발 → 스테이징 → 프로덕션 환경 분리
- CI/CD 파이프라인 구축
- 자동화된 테스트 실행
- 점진적 배포 (Blue-Green Deployment)

## 프로젝트 구조 예시

```
ai-university/
├── backend/                 # 백엔드 API 서버
├── frontend/               # 프론트엔드 웹 애플리케이션
├── ai-services/           # AI 모델 및 서비스
├── database/              # 데이터베이스 스키마 및 마이그레이션
├── docs/                  # 프로젝트 문서
├── scripts/               # 배포 및 유틸리티 스크립트
├── tests/                 # 통합 테스트
├── docker-compose.yml     # 개발 환경 설정
├── package.json          # 프로젝트 의존성
└── README.md             # 프로젝트 개요
```

## 주의사항

1. **AI API 비용 관리**: 요청 횟수 제한 및 캐싱 활용
2. **데이터 일관성**: 실시간 업데이트 시 동시성 제어
3. **확장성**: 마이크로서비스 아키텍처 고려
4. **접근성**: WCAG 2.1 AA 수준 준수
5. **국제화**: i18n 지원 (한국어/영어)

## 개발 우선순위

1. **1단계**: 기본 사용자 인증 및 관리 시스템
2. **2단계**: 커리큘럼 생성 엔진 구현
3. **3단계**: 콘텐츠 관리 시스템 개발
4. **4단계**: AI 튜터 시스템 통합
5. **5단계**: 평가 및 분석 시스템 완성
